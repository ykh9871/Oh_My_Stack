from airflow import DAG
from airflow.operators.python import PythonOperator
from airflow.operators.bash import BashOperator
from airflow.models import Variable
from airflow.providers.mysql.hooks.mysql import MySqlHook
from airflow.providers.amazon.aws.hooks.s3 import S3Hook
from datetime import datetime
import selenium
from selenium import webdriver
from selenium.common import NoSuchElementException
from selenium.webdriver.common.by import By
import time
import logging
from emoji import core
from datetime import datetime
import pandas as pd
import numpy as np
import re
import json
import requests

dag = DAG(
    dag_id = 'preprocessing_oms',
    start_date = datetime(2023,6,14),
    schedule = None,
    max_active_runs = 1,
    catchup = False,
    default_args = {}
)

def get_S3_connection():
    return S3Hook('aws_default')

def get_RDS_connection(autocommit=False):
    rds_hook = MySqlHook(mysql_conn_id='oh_my_stack_rds_id')
    con = rds_hook.get_conn()
    rds_hook.set_autocommit(con, autocommit)
    return rds_hook, con, con.cursor()

def get_df_from_production(*, table_name=None):
    hook, con, cur = get_RDS_connection()
    sql = """USE production;"""
    cur.execute(sql)
    sql = f"""SELECT * FROM {table_name};"""
    cur.execute(sql)
    data = cur.fetchall()
    df = pd.DataFrame(data, columns=[desc[0] for desc in cur.description])

    return df

def update_production_table(*, df=None, table_name=None):
    hook, con, cur = get_RDS_connection()

    df.fillna('nan', inplace=True)
    df = df.replace('nan', None)
    df = df.replace(0, None)
    df = df.replace('', None)

    sql = """SET FOREIGN_KEY_CHECKS = 0;"""
    cur.execute(sql)

    sql = """USE production;"""
    cur.execute(sql)

    try:
        cur.executemany(sql, params)
        sql = """SET FOREIGN_KEY_CHECKS = 1;"""
        cur.execute(sql)
        sql = f"""TRUNCATE TABLE {table_name};"""
        cur.execute(sql)

        table_columns = ",".join(df.columns)
        placeholders = ",".join(['%s'] * len(df.columns))

        sql = f"""INSERT INTO {table_name} ({table_columns}) VALUES ({placeholders})"""

        params = [tuple(record) for record in df.to_numpy()]
        con.commit()
    except:
        sql = """ROLLBACK;"""
        cur.execute(sql)

    

def upload_df_to_rds(*, table_name=None, schema=None, df=None):
    rds_hook, con, cur = get_RDS_connection()

    df.fillna(value=np.nan, inplace=True)
    df = df.replace(np.nan, None)
    df = df.replace('nan', None)

    sql = f"""USE {schema};"""
    cur.execute(sql)

    try:
        sql = f"""TRUNCATE TABLE {schema}.{table_name};"""
        cur.execute(sql)

        df_columns = ",".join(df.columns)
        placeholders = ",".join(['%s'] * len(df.columns))

        sql = f"""INSERT INTO {schema}.{table_name} ({df_columns}) VALUES ({placeholders});"""

        params = [tuple(record) for record in df.to_numpy()]
        cur.executemany(sql, params)
    except:
        sql = """ROLLBACK;"""
        cur.execute(sql)
    con.commit()

    return df


def get_recent_en(**context):
    hook = get_S3_connection()

    hook.download_file('data/programmers_en.csv', bucket_name='oh-my-stack', local_path='/var/lib/airflow/temp',
                       preserve_file_name=True, use_autogenerated_subdir=False)
    hook.download_file('data/jumpit_en.csv', bucket_name='oh-my-stack', local_path='/var/lib/airflow/temp',
                       preserve_file_name=True, use_autogenerated_subdir=False)
    df = pd.read_csv('/var/lib/airflow/temp/programmers_en.csv', encoding='utf8')
    df2 = pd.read_csv('/var/lib/airflow/temp/jumpit_en.csv', encoding='utf8')
    df = pd.concat([df, df2])

    hook.load_string(
        string_data=df.to_csv(index=False),
        key='data/daily_en.csv',
        bucket_name='oh-my-stack',
        replace=True
    )

get_recent_en = PythonOperator(
task_id = 'get_recent_en',
    python_callable = get_recent_en,
    params = {},
    dag = dag
)


def career_erd_separator(**context):

    hook = get_S3_connection()
    hook.download_file('data/daily_en.csv', bucket_name='oh-my-stack', local_path='/var/lib/airflow/temp', preserve_file_name=True, use_autogenerated_subdir=False)
    df = pd.read_csv('/var/lib/airflow/temp/daily_en.csv', encoding='utf8')
    rds_hook, con, cur = get_RDS_connection()

    # load career table
    df2 = pd.DataFrame({'id': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],
                        'career': ['신입 이상', '1년 이상', '2년 이상', '3년 이상', '4년 이상', '5년 이상', '6년 이상', '7년 이상', '8년 이상',
                                   '9년 이상', '10년 이상', '12년 이상', '15년 이상']})

    sql = """USE production;"""
    cur.execute(sql)

    sql = """SET FOREIGN_KEY_CHECKS = 0;"""
    cur.execute(sql)

    sql = """SELECT * FROM career;"""
    cur.execute(sql)

    career_columns = ",".join(df2.columns)
    query_param = ",".join(['%s'] * len(df2.columns))

    try:
        sql = """TRUNCATE TABLE career;"""
        cur.execute(sql)

        sql = f"""INSERT INTO career ({career_columns}) VALUES ({query_param});"""

        params = [tuple(record) for record in df2.to_numpy()]
        cur.executemany(sql, params)
    except:
        sql = """ROLLBACK;"""
        cur.execute(sql)

    # change career value correctly
    df['career'] = df['career'].astype(str)
    df = df.dropna(subset=['main_business'])
    df = df.dropna(subset=['qualification'])
    df = df.dropna(subset=['preferences'])
    df['career'] = df['career'].fillna('신입 이상')
    df['career'] = df['career'].replace('nan', '신입 이상')
    df.loc[df['career'].str.startswith('1'), 'career'] = '1년 이상'
    df.loc[df['career'].str.startswith('2'), 'career'] = '2년 이상'
    df.loc[df['career'].str.startswith('3'), 'career'] = '3년 이상'
    df.loc[df['career'].str.startswith('4'), 'career'] = '4년 이상'
    df.loc[df['career'].str.startswith('5'), 'career'] = '5년 이상'
    df.loc[df['career'].str.startswith('6'), 'career'] = '6년 이상'
    df.loc[df['career'].str.startswith('7'), 'career'] = '7년 이상'
    df.loc[df['career'].str.startswith('8'), 'career'] = '8년 이상'
    df.loc[df['career'].str.startswith('9'), 'career'] = '9년 이상'
    df.loc[df['career'].str.startswith('10'), 'career'] = '10년 이상'
    df.loc[df['career'].str.startswith('0'), 'career'] = '신입 이상'
    df.loc[df['career'].str.startswith('경력 1~'), 'career'] = '1년 이상'
    df.loc[df['career'].str.startswith('경력 2~'), 'career'] = '2년 이상'
    df.loc[df['career'].str.startswith('경력 3~'), 'career'] = '3년 이상'
    df.loc[df['career'].str.startswith('경력 4~'), 'career'] = '4년 이상'
    df.loc[df['career'].str.startswith('경력 5~'), 'career'] = '5년 이상'
    df.loc[df['career'].str.startswith('경력 5년'), 'career'] = '5년 이상'
    df.loc[df['career'].str.startswith('경력 6~'), 'career'] = '6년 이상'
    df.loc[df['career'].str.startswith('경력 7~'), 'career'] = '7년 이상'
    df.loc[df['career'].str.startswith('경력 8~'), 'career'] = '8년 이상'
    df.loc[df['career'].str.startswith('경력 9~'), 'career'] = '9년 이상'
    df.loc[df['career'].str.startswith('경력 10~'), 'career'] = '10년 이상'
    df.loc[df['career'].str.startswith('경력 11~'), 'career'] = '11년 이상'
    df.loc[df['career'].str.startswith('경력 12~'), 'career'] = '12년 이상'
    df.loc[df['career'].str.startswith('경력 13~'), 'career'] = '13년 이상'
    df.loc[df['career'].str.startswith('경력 14~'), 'career'] = '14년 이상'
    df.loc[df['career'].str.startswith('경력 15~'), 'career'] = '15년 이상'
    df.loc[df['career'].str.startswith('신입'), 'career'] = '신입 이상'
    df.loc[df['career'].str.startswith('경력 17~'), 'career'] = '15년 이상'

    df['career'] = df['career'].replace('신입 이상', '1')
    df['career'] = df['career'].replace('1년 이상', '2')
    df['career'] = df['career'].replace('2년 이상', '3')
    df['career'] = df['career'].replace('3년 이상', '4')
    df['career'] = df['career'].replace('4년 이상', '5')
    df['career'] = df['career'].replace('5년 이상', '6')
    df['career'] = df['career'].replace('6년 이상', '7')
    df['career'] = df['career'].replace('7년 이상', '8')
    df['career'] = df['career'].replace('8년 이상', '9')
    df['career'] = df['career'].replace('9년 이상', '10')
    df['career'] = df['career'].replace('10년 이상', '11')
    df['career'] = df['career'].replace('12년 이상', '12')
    df['career'] = df['career'].replace('15년 이상', '13')

    # rename column name to compatible
    df.rename(columns={'career': 'career_id'}, inplace=True)
    df['id'] = df.reset_index().index + 1

    # load career_separated table
    career_separated_columns = ",".join(df.columns)
    placeholders = ",".join(['%s'] * len(df.columns))

    try:
        sql = """TRUNCATE TABLE career_separated;"""
        cur.execute(sql)

        sql = f"""INSERT INTO career_separated ({career_separated_columns}) VALUES ({placeholders});"""

        params = [tuple(record) for record in df.to_numpy()]
        cur.executemany(sql, params)
    except:
        sql = """ROLLBACK;"""
        cur.execute(sql)

    sql = """SET FOREIGN_KEY_CHECKS = 1;"""
    cur.execute(sql)

    con.commit()

career_erd_separator = PythonOperator(
    task_id = 'career_erd_separator',
    python_callable = career_erd_separator,
    params = {},
    dag = dag
)



def preprocess_address(**context):

    df = get_df_from_production(table_name='career_separated')
    def change_address_cityname(df):
        # 데이터프레임의 각 행을 반복하며 주소를 전처리합니다.
        for i, row in df.iterrows():
            address = row['address']

            # "서울특별시"를 "서울"로 바꿉니다.
            address = address.replace("서울특별시", "서울")
            address = address.replace("서울시", "서울")
            address = address.replace("광주광역시", "광주시")
            address = address.replace("대전", "대전시")
            address = address.replace("대전시시", "대전시")
            address = address.replace("대전시광역시", "대전시")
            address = address.replace("부산광역", "부산시")
            address = address.replace("부산", "부산시")
            address = address.replace("부산시시", "부산시")
            address = address.replace("대구", "대구시")
            address = address.replace("대구시광역시", "대구시")
            address = address.replace("울산광역", "울산")
            address = address.replace("강ㅇ남", "강남")
            address = address.replace("경기도", "경기")
            address = address.replace("경기도", "경기")
            address = address.replace("대한민국 ", "")
            address = address.replace("인천광역", "인천")
            address = address.replace("부산시시", "부산시")
            address = address.replace("해운대구시", "해운대구")
            address = address.replace("광주", "광주시")
            address = address.replace("광주시시", "광주시")
            address = address.replace("울산", "울산시")
            address = address.replace("울산시시", "울산시")

            # 주소 열을 업데이트합니다.
            df.at[i, 'address'] = address

        return df

    def change_address_main(df):
        # 주소에서 쉼표 또는 괄호 뒤를 제거하는 함수
        def remove_after_comma_or_parenthesis(address):
            address = address.split(",")[0]
            address = address.split("(")[0]
            return address.strip()

        # 새로운 컬럼에 정제된 주소를 저장
        df['cleaned_address'] = df['address'].apply(remove_after_comma_or_parenthesis)
        df['cleaned_address'].info()

        # 주소 이상치 전처리
        df.loc[df['company'] == '에너자이', 'cleaned_address'] = '서울 강남구 테헤란로 431'
        df.loc[df['company'] == '에코앤파트너스', 'cleaned_address'] = '서울 강서구 마곡중앙1로 14'
        df.loc[df['company'] == '이우소프트', 'cleaned_address'] = '경기 화성시 삼성1로2길 13'

        return df

    def change_address_detail(df):
        # 주소 전처리 2

        # 데이터프레임의 각 행을 반복하며 주소를 전처리합니다.
        for i, row in df.iterrows():
            address = row['cleaned_address']
            company = row['company']

            # 같은 회사 같은 위치일때 주소 형식을 맞춥니다.

            # 다비오
            address = address.replace("서울 마포구 백범로 35", "서울 마포구 마포대로 144")

            # 리빌더에이아이
            address = address.replace("서울 서초구 서초대로74길 14 더에셋 빌딩 18층", "서울 서초구 성촌길 56")

            # 셀디코리아
            address = address.replace("서울 중구 청계천로 40 903", "서울 중구 청계천로 40")
            address = address.replace("서울 청계천로40 903호", "서울 중구 청계천로 40")

            # 미스터픽
            address = address.replace("서울 테헤란로 447 KB우준타워 16층", "서울 강남구 테헤란로 447")

            # 111퍼센트
            address = address.replace("서울 강남구 테헤란로 152, 33층", "서울 강남구 테헤란로 152")
            address = address.replace("서울 강남구 테헤란로 152(역삼동, 강남파이낸스센터)", "서울 강남구 테헤란로 152")

            # EVAR
            address = address.replace("경기도 성남시 수정구 창업로 42, 420호", "경기도 성남시 수정구 창업로 42")
            address = address.replace("경기도 성남시 수정구 창업로 42, 919호", "경기도 성남시 수정구 창업로 42")

            # WATA Inc.
            address = address.replace("경기 성남시 분당구 대왕판교로 670 유스페이스2 B동 403호", "경기 성남시 분당구 대왕판교로 670")
            address = address.replace("경기도 성남시 분당구 대왕판교로 670, 유스페이스2 B동 403호", "경기 성남시 분당구 대왕판교로 670")
            address = address.replace("경기도 성남시 분당구 대왕판교로 670, B동 403호", "경기 성남시 분당구 대왕판교로 670")

            # 가비아씨엔에스
            address = address.replace("경기 성남시 분당구 대왕판교로 670, A동 403,404호 (삼평동, 유스페이스2)", "경기 성남시 분당구 대왕판교로 670")
            address = address.replace("경기 성남시 분당구 대왕판교로 670, 에이동 403호,404호 B동 312호,322호,323호", "경기 성남시 분당구 대왕판교로 670")

            # 가야데이터
            address = address.replace("서울 서초구 반포대로 105, 3층 (서초동, 다안빌딩)", "서울 서초구 반포대로 105")
            address = address.replace("서울사무소", "서울 서초구 반포대로 105")

            # 게임듀오
            address = address.replace("경기 성남시 수정구 창업로 43 B동 907호", "경기 성남시 수정구 창업로 43")
            address = address.replace("경기 성남시 수정구 창업로 43 B동", "경기 성남시 수정구 창업로 43")
            address = address.replace("경기 성남시 수정구 창업로 43, (시흥동)", "경기 성남시 수정구 창업로 43")

            # 겟차
            address = address.replace("서울 강남구 테헤란로 129, (역삼동) 강남N타워 8층", "서울 강남구 테헤란로 129")
            address = address.replace("서울 강남구 테헤란로 129, 8층 811호", "서울 강남구 테헤란로 129")

            # 골프존카운티
            address = address.replace("서울 강남구 신사동 587-23 6층", "서울 강남구 도산대로 207")

            # 21세기전파상
            address = address.replace("서울 서초구 강남대로53길 8, (서초동) 602호", "서울 서초구 강남대로53길 8")
            address = address.replace("서울 서초구 강남대로53길 8, 6층 2호", "서울 서초구 강남대로53길 8")
            address = address.replace("서울 서초구 강남대로53길 8, (서초동) 608호", "서울 서초구 강남대로53길 8")

            # 글래스돔코리아
            address = address.replace("대전시 서구 한밭대로 755, 삼성생명 22F", "대전시 서구 한밭대로 755")
            address = address.replace("대전시 서구 한밭대로 755, 삼성생명빌딩 22층", "대전시 서구 한밭대로 755")

            # 긴트
            address = address.replace("서울 강남구 봉은사로 509 4층 긴트", "서울 강남구 봉은사로 509")
            address = address.replace("서울 강남구 삼성동 75-6 수당빌딩 4층 긴트", "서울 강남구 봉은사로 509")
            address = address.replace("서울 강남구 봉은사로 509, (삼성동) 수당빌딩 4층 긴트 서울오피스", "서울 강남구 봉은사로 509")

            # 나모웹비즈
            address = address.replace("서울 송파구 법원로11길 7, 씨동905호,906호", "서울 송파구 법원로11길 7")
            address = address.replace("서울 송파구 법원로11길 7, C동 905호", "서울 송파구 법원로11길 7")

            # 넛지헬스케어
            address = address.replace("서울 강남구 역삼로1길 8, (역삼동)", "서울 강남구 역삼로1길 8")
            address = address.replace("대한민국 서울 강남구 역삼로1길 8, 평익빌딩", "서울 강남구 역삼로1길 8")

            # 네오리진
            address = address.replace("서울 강남구 학동로 155 (논현동)", "서울 강남구 학동로 155")
            address = address.replace("서울 강남구 학동로 155 원영빌딩 3~4층", "서울 강남구 학동로 155")

            # 넥서스커뮤니티
            address = address.replace("서울 영등포구 여의대로 108, (여의도동) 파크원 타워2 19F", "서울 영등포구 여의대로 108")
            address = address.replace("서울 영등포구 여의대로 108 파크원 타워2 19층", "서울 영등포구 여의대로 108")

            # 넥스트레벨스튜디오
            address = address.replace("서울 성동구 성수2가 3동 289-10, 제강빌딩", "서울 성동구 성수이로 113")
            address = address.replace("서울 성동구 성수2가 3동 289-10, 제강빌딩 8층", "서울 성동구 성수이로 113")
            address = address.replace("서울 성동구 성수이로 113 8층", "서울 성동구 성수이로 113")

            # 넷킬러
            address = address.replace("서울 중구 삼일대로 343, 8층", "서울 중구 삼일대로 343")
            address = address.replace("서울 중구 삼일대로 343, (저동1가) 위워크 8층", "서울 중구 삼일대로 343")

            # 누리미디어
            address = address.replace("서울 마포구 양화로19길 22-16, (동교동)", "서울 마포구 양화로19길 22-16")
            address = address.replace("서울 마포구 양화로19길 22-16, 3~6층", "서울 마포구 양화로19길 22-16")

            # 뉴링크
            address = address.replace("서울 강남구 학동로 31길 12, 5층", "서울 강남구 학동로 31길 12")
            address = address.replace("서울 강남구 학동로31길 12 벤쳐캐슬 5층", "서울 강남구 학동로 31길 12")

            # 뉴빌리티
            address = address.replace("서울 성동구 왕십리로 115, (성수동1가)", "서울 성동구 왕십리로 115")
            address = address.replace("서울 성동구 왕십리로 115, 2층", "서울 성동구 왕십리로 115")

            # 다누시스
            address = address.replace("경기 광명시 일직동 514 GIDC C동 13층", "경기 광명시 일직동 514")
            address = address.replace("경기 광명시 일직로 43 C동 1314호", "경기 광명시 일직동 514")

            # 고스트패스
            address = address.replace("서울 또는 판교 지사 설립 예정 / 광주시 북구 첨단과기로 123", "광주시 북구 첨단과기로 123")
            address = address.replace("서울 또는 경기에 지사 설립 예정 / 광주시 북구 첨단과기로 123", "광주시 북구 첨단과기로 123")
            address = address.replace("광주시 동구 금남로4가6 AI창업캠프 2호점 403호 및 재택근무", "광주시 북구 첨단과기로 123")

            # 다이렉트클라우드랩
            address = address.replace("서울 강남구 선릉로92길 36", "서울 강남구 선릉로 92길 36")

            # 다임리서치
            address = address.replace("서울 서초구 반포대로28길 20", "서울 서초구 반포대로 28길 20")
            address = address.replace("서울 서초구 반포대로 28길 20 두원빌딩 2층", "서울 서초구 반포대로 28길 20")

            # 더이앤엠
            address = address.replace("서울 서초구 잠원동 15-1", "서울 서초구 강남대로 101안길 41")

            # 더파이러츠
            address = address.replace("서울 영등포구 선유로 146, 614호(양평동3가, 이앤씨드림타워)", "서울 영등포구 선유로 146")
            address = address.replace("서울 영등포구 선유로 146, 613호(일부),614호", "서울 영등포구 선유로 146")

            # 데브툴즈
            address = address.replace("경기도 안양시 동안구 시민대로 361, 1106호(에이스평촌타워)", "경기 안양시 동안구 시민대로 361")
            address = address.replace("경기 안양시 동안구 시민대로 361, 1106호 (관양동)", "경기 안양시 동안구 시민대로 361")

            # 데이터메이커
            address = address.replace("대전시 유성구 유성대로 871, 4-5층", "대전시 유성구 유성대로 871")
            address = address.replace("대전시 유성구 유성대로 871, 4,5층(죽동, CU빌딩)", "대전시 유성구 유성대로 871")

            # 데이터비
            address = address.replace("서울 마포구 백범로31길 21 서울창업허브 별관 404호", "서울 마포구 백범로31길 21")
            address = address.replace("서울 마포구 백범로31길 21, (공덕동) 607호", "서울 마포구 백범로31길 21")

            # 덴티움
            address = address.replace("경기 수원시 영통구 창룡대로 256번길 76 덴티움 지식산업센터", "경기 수원시 영통구 창룡대로 256번길 76")

            # 델레오코리아
            address = address.replace("서울 강남구 테헤란로87길 36 (삼성동, 도심공항타워) 12층 델레오코리아", "서울 강남구 테헤란로87길 36")
            address = address.replace("서울 강남구 테헤란로87길 36 12층 델레오코리아", "서울 강남구 테헤란로87길 36")

            # 드림시스
            address = address.replace("서울 서초구 바우뫼로 147, 3,4층 스카이뷰빌딩", "서울 서초구 바우뫼로 147")
            address = address.replace("서울 서초구 바우뫼로 147, 3,4층", "서울 서초구 바우뫼로 147")

            # 드림어스컴퍼니
            address = address.replace("서울 서초구 강남대로 311 15층 플로하우스", "서울 서초구 강남대로 311")

            # 디리아
            address = address.replace("서울 서초구 강남대로 311", "서울 서초구 강남대로 331")
            address = address.replace("서울 서초구 강남대로 331 6층", "서울 서초구 강남대로 331")

            # 디어유
            address = address.replace("서울 강남구 삼성로 633, 4층", "서울 강남구 삼성로 633")
            address = address.replace("서울 강남구 삼성로 633, 4층,5층", "서울 강남구 삼성로 633")
            address = address.replace("서울 강남구 삼성로 633,5층", "서울 강남구 삼성로 633")

            # 딥핑소스
            address = address.replace("서울 강남구 언주로 508, 3층", "서울 강남구 언주로 508")
            address = address.replace("서울 강남구 언주로 508, 3층, 5층", "서울 강남구 언주로 508")
            address = address.replace("서울 강남구 언주로 508, 5층", "서울 강남구 언주로 508")
            address = address.replace("서울 강남구 언주로 508, (역삼동) 3층, 5층", "서울 강남구 언주로 508")

            # 라라스테이션
            address = address.replace("서울 강남구 봉은사로18길 71, SG아트타워 1F~B3", "서울 강남구 봉은사로18길 71")

            # 라이언로켓
            address = address.replace("서울 중구 남대문로 109, (다동) 국제빌딩 12층", "서울 중구 남대문로 109")
            address = address.replace("서울 중구 남대문로 109, 12층 국제빌딩 12", "서울 중구 남대문로 109")

            # 라이프페스타
            address = address.replace("서울 강남구 선릉로 428, 위워크 선릉 3호점", "서울 강남구 선릉로 428")
            address = address.replace("서울 강남구 선릉로 428, 19층 104호", "서울 강남구 선릉로 428")

            # 레드브릭
            address = address.replace("서울 강남구 강남대로 376 (8258빌딩) 11층, 레드브릭", "서울 강남구 강남대로 376")
            address = address.replace("서울 강남구 강남대로 376, (역삼동) 8258빌딩, 11층 레드브릭", "서울 강남구 강남대로 376")
            address = address.replace("서울 강남구 테헤란로 427 위워크타워", "서울 강남구 강남대로 376")

            # 레몬베이스
            address = address.replace("서울 성동구 왕십리로 88 5층 레몬베이스", "서울 성동구 왕십리로 88")
            address = address.replace("서울 성동구 성수동 1가 656-950 노벨빌딩 5층", "서울 성동구 왕십리로 88")

            # 렌딧
            address = address.replace("서울 영등포구 여의나루로 60, (여의도동)", "서울 영등포구 여의나루로 60")
            address = address.replace("서울 영등포구 여의나루로 60, 6층", "서울 영등포구 여의나루로 60")

            # 렛유인에듀
            address = address.replace("서울 강남구 역삼로3길 11, (역삼동) 광성빌딩 본관 9층", "서울 강남구 역삼로3길 11")
            address = address.replace("서울 강남구 역삼로3길 11 광성빌딩 본관 9층", "서울 강남구 역삼로3길 11")

            # 로민
            address = address.replace("서울 서초구 서초대로 396, 1707, 1702호(서초동, 강남빌딩", "서울 서초구 방배천로2길 10")
            address = address.replace("서울 서초구 서초대로 396, 1707, 1702호(서초동, 강남빌딩)", "서울 서초구 방배천로2길 10")
            address = address.replace("서울 서초구 서초대로 396", "서울 서초구 방배천로2길 10")

            # 로지올
            address = address.replace("서울 서초구 동산로 52, 4층(양재동, 인성빌딩)", "서울 서초구 동산로 52")
            address = address.replace("서울 서초구 동산로 52, 2층,3층,4층,5층", "서울 서초구 동산로 52")
            address = address.replace("서울 서초구 동산로 52, (양재동)", "서울 서초구 동산로 52")

            # 론픽
            address = address.replace("부산시 해운대구 센텀중앙로97", "부산시 해운대구 센텀중앙로 97")

            # 롯데정보통신
            address = address.replace("서울 금천구 가산디지털2로 179 또는 을지로", "서울 금천구 가산디지털2로 179")
            address = address.replace("서울 수도권 내", "서울 금천구 가산디지털2로 179")

            # 리디
            address = address.replace("서울 강남구 역삼동 702-28", "서울 강남구 테헤란로 325")

            # 리콘랩스
            address = address.replace("서울 강남구 학동로53길 30", "서울 강남구 학동로 53길 30")

            # 마켓오브메테리얼
            address = address.replace("경기 성남시 수정구 대왕판교로 815 기업지원허브 802호", "경기 성남시 수정구 대왕판교로 815")

            # 메이아이
            address = address.replace("서울 강남구 테헤란로82길 15", "서울 강남구 테헤란로 82길 15")

            # 몰로코
            address = address.replace("서울 강남구 테헤란로 231 센터필드 WEST 8층", "서울 강남구 테헤란로 231")
            address = address.replace("서울 강남구 역삼 센터필드 West", "서울 강남구 테헤란로 231")

            # 무스마
            address = address.replace("서울 서초구 서초대로 332 4층", "서울 서초구 서초대로 332")

            # 미니게이트
            address = address.replace("서울 강남구 학동로33길 27-1", "서울 강남구 학동로 33길 27-1")

            # 미디움
            address = address.replace("서울 강남구 영동대로85길 38 진성빌딩 10층", "서울 강남구 영동대로85길 38")

            # 미투온
            address = address.replace("서울 강남구 학동로343", "서울 강남구 학동로 343")

            # 민병철교육그룹
            address = address.replace("서울 강남구 선릉로93길 40 스파크플러스", "서울 강남구 선릉로93길 40")

            # 바로티나
            address = address.replace("경기 성남시 분당구 황새울로 331번길 8", "경기 성남시 분당구 성남대로 331번길 8")
            address = address.replace("경기 성남시 분당구 황새울로 224", "경기 성남시 분당구 성남대로 331번길 8")

            # 미리디
            address = address.replace("서울 구로구 구로동 197-21", "서울 구로구 디지털로31길 12")

            # 바텍
            company = company.replace("바텍 네트웍스", "바텍")
            company = company.replace("바텍", "바텍 네트웍스")

            # 배럴아이
            address = address.replace("서울 강남구 테헤란로 312 비전타워 14층", "서울 강남구 테헤란로 312")
            address = address.replace("서울 강남구 테헤란로 312 비젼타워 14층", "서울 강남구 테헤란로 312")

            # 백패커
            address = address.replace("서울 서초구 서초대로 398 BNK디지털타워 19층", "서울 서초구 서초대로 398")

            # 버즈니
            address = address.replace("서울 관악구 남부순환로 1832 버즈니", "서울 관악구 남부순환로 1832")

            # 벨아이앤에스
            address = address.replace("서울 서대문구 충정로8", "서울 서대문구 충정로 8")
            address = address.replace("서울 서대문구 경기대로47", "서울 서대문구 충정로 8")
            address = address.replace("서울 중구 중림로31 이화빌딩 3층", "서울 중구 중림로 31")

            # 부동산플래닛
            address = address.replace("서울 강남구 영동대로702", "서울 강남구 영동대로 702")

            # 브리치
            address = address.replace("서울 강남구 역삼동 620", "서울 강남구 봉은사로18길 85")

            # 블랙탠저린
            address = address.replace("서울 강남구 역삼로 180 마루180 3층", "서울 강남구 역삼로 180")
            address = address.replace("서울 강남구 역삼역 마루180", "서울 강남구 역삼로 180")

            # 비엠텍시스템
            address = address.replace("전남 나주시 교육길 13 B동 306호", "전남 나주시 교육길 13")
            address = address.replace("전남 나주시 교육길13 스마트파크 지식산업센터 B동 306호", "전남 나주시 교육길 13")

            # 사람인
            address = address.replace("서울 구로구 디지털로34길 43 14층", "서울 구로구 디지털로34길 43")

            # 세나클소프트
            address = address.replace("서울 강남구 역삼2동 테헤란로44길 8", "서울 강남구 테헤란로 44길 8")
            address = address.replace("서울 강남구 테헤란로44길 8", "서울 강남구 테헤란로 44길 8")

            # 소셜인프라테크
            address = address.replace("서울 마포구 마포대로 86 창강빌딩", "서울 마포구 마포대로 86")
            address = address.replace("서울 마포구 마포대로 86 창강빌딩 522호", "서울 마포구 마포대로 86")
            address = address.replace("서울 마포구 마포대로 86 522호", "서울 마포구 마포대로 86")

            # 소프트베리
            address = address.replace("서울 서초구 강남대로 331 드림플러스 강남", "서울 서초구 강남대로 331")
            address = address.replace("서울 서초구 강남대로311", "서울 서초구 강남대로 331")

            # 쉐어그라운드
            address = address.replace("서울 중구 퇴계로75길 15", "서울 중구 퇴계로75길 23")

            # 슈어소프트테크
            address = address.replace("경기 성남시 수정구 금토로80번길 37 인피니티타워 E동", "경기 성남시 수정구 금토로80번길 37")
            address = address.replace("경기 성남시 수정구 금토로80번길 37 인피니티타워E동", "경기 성남시 수정구 금토로80번길 37")
            address = address.replace("경기 화성시 현대연구소로 150", "경기 화성시 삼성1로5길 37")

            # 스마트스코어
            address = address.replace("서울 강남구 테헤란로98길 8 KOSMO DAECHI 8-9층", "서울 강남구 테헤란로98길 8")

            # 스카이오토넷
            address = address.replace("서울 서초구 논현로 145 수냐빌딩 4층", "서울 서초구 논현로 153")

            # 스콥정보통신
            address = address.replace("서울 서초구 반포대로 10길 24", "서울 서초구 반포대로10길 24")

            # 스타일씨코퍼레이션
            address = address.replace("서울 마포구 서교동 395-3 북앤빌딩 2층", "서울 마포구 잔다리로 49")

            # 스터닝
            address = address.replace("서울 강남구 봉은사로 112길 6", "서울 강남구 봉은사로112길 6")

            # 스튜디오랩
            address = address.replace("서울 강남구 강남대로 62길 34", "서울 강남구 강남대로 62길 31")
            address = address.replace("서울 강남구 강남대로 62길 30", "서울 강남구 강남대로 62길 31")

            # 스펙터
            address = address.replace("서울 강남구 테헤란로 7길 22", "서울 강남구 테헤란로7길 22")

            # 시니스트
            address = address.replace("서울 강남구 학동로 9길 33 시니스트빌딩 3층", "서울 강남구 학동로 9길 33")
            address = address.replace("서울 강남구 학동로 9길 33 시니스트빌딩 4층", "서울 강남구 학동로 9길 33")

            # 썬더소프트코리아
            address = address.replace("경기 용인시 기흥구/동탄", "경기 용인시 기흥구 서천로201번길 11")
            address = address.replace("경기 용인시 기흥구 서천로201번길 11 '기흥 테라타워' 지식산업센터", "경기 용인시 기흥구 서천로201번길 11")

            # 쓰리아이
            address = address.replace("서울 강남구 역삼로 25길 23 대일테크 빌딩", "서울 강남구 역삼로25길 23")

            # 씨엔알리서치
            address = address.replace("서울 강남구 대치동 918-13 기업부설연구소", "서울 강남구 역삼로 412")
            address = address.replace("서울 강남구 역삼로 412 씨엔알빌딩", "서울 강남구 역삼로 412")

            # 아레나캐스트
            address = address.replace("서울 성동구 연무장길76", "서울 성동구 연무장길 76")

            # 아이엠에스모빌리티
            address = address.replace("서울 광진구 아차산로 355 타워더모스트광진아크로텔 3층", "서울 광진구 아차산로 355")

            # 아이오트러스트
            address = address.replace("서울 강남구 선릉로 747 삼성당빌딩 7층", "서울 강남구 선릉로 747")

            # 아이페이지온
            address = address.replace("서울 강남구 테헤란로14길5", "서울 강남구 테헤란로14길 5")

            # 아정네트웍스
            address = address.replace("서울 강남구 프레스티지투빌딩 4층", "서울 강남구 테헤란로 4길 35")

            # 아주큐엠에스
            address = address.replace("경기 용인시 수지구 용구대로 2771번길 85", "경기 용인시 수지구 용구대로2771번길 85")

            # 아토리서치
            address = address.replace("서울 서초구 강남대로 275", "서울 서초구 강남대로43길 6")

            # 아파트스토리
            address = address.replace("서울 서초구 강남대로 331 1007호", "서울 서초구 강남대로 331")

            # 아파트아이
            address = address.replace("서울 금천구 가산디지털1로 186 제이플라츠 1203호", "서울 금천구 가산디지털1로 186")
            address = address.replace("서울 금천구 가산디지털 1로 186 제이플라츠 1203호", "서울 금천구 가산디지털1로 186")

            # 안티그래비티
            address = address.replace("서울 강남구 논현로 650-1 히아빌딩 6층", "서울 강남구 논현로 650-1")

            # 알비언
            address = address.replace("서울 강남구 학동로 25길 33", "서울 강남구 학동로25길 33")

            # 알지티
            address = address.replace("서울 금천구 벚꽃로 234 에이스하이엔드6차 802호", "서울 금천구 벚꽃로 234")

            # 알체라
            address = address.replace("경기 성남시 분당구 판교로256번길 25 GB2빌딩 C동 7층", "경기 성남시 분당구 판교로256번길 25")
            address = address.replace("Alchera Data Science Division", "경기 성남시 분당구 판교로256번길 25")

            # 알티올
            address = address.replace("인천 연수구 송도과학로 32 송도테크노파크IT센터 M동 1601호 & 1101호", "인천 연수구 송도과학로 32")

            # 스테이폴리오
            address = address.replace("서울 종로구 자하문로 21", "서울 종로구 자하문로9길 24")

            # 스텝페이
            address = address.replace("서울 영등포구 은행로 11 2층", "서울 영등포구 은행로 11")

            # 스토어링크
            address = address.replace("서울 중구 중림로 49. 실로암빌딩 1층", "서울 중구 중림로 49")

            # 에너자이
            address = address.replace("서울 강남구 테헤란로431", "서울 강남구 테헤란로 431")
            address = address.replace("nan", "서울 강남구 테헤란로 431")

            # 에딘트
            address = address.replace("경기 성남시 수정구 시흥동 대왕판교로 815 판교 제2테크노밸리 기업지원허브 창업존 7층 G736", "경기 성남시 수정구 대왕판교로 815")

            # 비씨랩스
            address = address.replace("서울 강남구 테헤란로333", "서울 강남구 테헤란로 333")

            # 에이로직
            address = address.replace("서울 동작구 상도로 360 503호", "서울 동작구 상도로 360")

            # 에스티씨랩
            address = address.replace("서울 강남구 봉은사로 37길 5", "서울 강남구 봉은사로37길 5")

            # 에이모
            address = address.replace("경기 성남시 분당구 판교로228번길17", "경기 성남시 분당구 판교로228번길 17")
            address = address.replace("경기 성남시 분당구 벌말로50번길 41 투아이센터 7층", "경기 성남시 분당구 판교로228번길 17")
            address = address.replace("경기 성남시 분당구 벌말로 50번길 41 투아이센터 7층", "경기 성남시 분당구 판교로228번길 17")

            # 에스티피씨
            address = address.replace("경기 성남시 분당구 구미동 로드랜드이지타워 108호", "경기 성남시 분당구 성남대로 69")
            address = address.replace("경기 성남시 분당구 구미동 로드랜드이지타워 1층 108호", "경기 성남시 분당구 성남대로 69")

            # 에이미파이
            address = address.replace("부산시 전포대로 133", "부산시 남구 전포대로 133")

            # 에이치투오호스피탈리티
            address = address.replace("서울 강남구 논현로 98길 28", "서울 강남구 논현로98길 28")

            # 엑소시스템즈
            address = address.replace("경기 성남시 수정구 창업로 54", "경기 성남시 수정구 달래내로 46")

            # 엔디소프트
            address = address.replace("부산시 해운대구 우동 센텀중앙로48 에이스하이테크1212 또는 서울 강남 지사 근무", "부산시 해운대구 우동 센텀중앙로48")
            address = address.replace("부산시 해운대구 우동 센텀중앙로48 에이스하이테크1212 또는 서울 강남 근무", "부산시 해운대구 우동 센텀중앙로48")

            # 엔스테이지
            address = address.replace("경기 성남시 수정구 창업로 42 경기기업성장센터 527~528호", "경기 성남시 수정구 창업로 42")

            # 엔엑스테크놀로지
            address = address.replace("[지사] 서울 영등포구 양산로 43", "서울 영등포구 양산로 43")

            # 열림데이타시스템
            address = address.replace("서울 구로구 디지털로 30길 28. 1206호", "서울 구로구 디지털로30길 28")

            # 오케스트로
            address = address.replace("서울 영등포구 국제금융로2길 17", "서울 영등포구 여의대로 108")
            address = address.replace("서울 영등포구 여의대로 108 PARC1 NH금융타워", "서울 영등포구 여의대로 108")
            address = address.replace("서울 영등포구 여의대로 108 PARC1 NH금융타워 TOWER 2 빌딩 43층", "서울 영등포구 여의대로 108")
            address = address.replace("서울 영등포구 국제금융로2길 17 시티플라자 6층", "서울 영등포구 여의대로 108")
            address = address.replace("서울 영등포구 여의대로 108 TOWER 2 빌딩 43층", "서울 영등포구 여의대로 108")
            address = address.replace("서울 영등포구 여의대로 108 시티플라자 6층", "서울 영등포구 여의대로 108")

            # 오토피디아
            address = address.replace("서울 성동구 아사찬로 66 리얼컴퍼니 빌딩 3층", "서울 성동구 아차산로 66 리얼컴퍼니 빌딩 3층")

            # 오피지지
            address = address.replace("서울 강남구 테헤란로507", "서울 강남구 테헤란로 507")

            # 올거나이즈코리아
            address = address.replace("서울 강남구 도곡로3길 27 동일빌딩 12층", "서울 강남구 테헤란로8길 16")

            # 월급쟁이부자들
            address = address.replace("서울 서초구 사임당로 143 크로스 143타워 201호", "서울 서초구 사임당로 143")

            # 웨이브릿지
            address = address.replace("서울 중구 서소문로 50 센트럴플레이스 8층", "서울 중구 서소문로 50")

            # 업템포글로벌
            address = address.replace("서울 강남구 선릉로99길 9", "서울 강남구 선릉로 561")
            address = address.replace("서울 강남구 삼성로75길 32-11", "서울 강남구 선릉로 561")
            address = address.replace("서울 강남구 대치동 901-44 대산빌딩 3층", "서울 강남구 선릉로 561")
            address = address.replace("서울 강남구 삼성로75길 32-11 3층", "서울 강남구 선릉로 561")
            address = address.replace("서울 강남구 선릉로 99길 9", "서울 강남구 선릉로 561")
            address = address.replace("서울 강남구 선릉로 561 2층", "서울 강남구 선릉로 561")

            # 위메이드
            address = address.replace("경기 성남시 대왕판교로 644번길 49", "경기 성남시 분당구 대왕판교로644번길 49")
            address = address.replace("서울 강남구 테헤란로 223 큰길타워빌딩", "서울 강남구 테헤란로 223")

            # 윙잇
            address = address.replace("서울 강남구 봉은사로30길 43", "서울 강남구 테헤란로 32길 26")

            # 유비씨
            address = address.replace("안양시 동안구 시민대로 248 25 안양창조산업진흥원 404호", "안양시 동안구 시민대로 248번길 25")
            address = address.replace("안양시 동안구 시민대로 248번길 25 안양창조산업진흥원 404호", "안양시 동안구 시민대로 248번길 25")
            address = address.replace("안양시 동안구 시민대로 248 25 안양산업진흥원 404호", "안양시 동안구 시민대로 248번길 25")

            # 이노아이
            address = address.replace("경기 성남시 분당구 판교역로 240 판교 테크노밸리 삼환하이펙스", "경기도 성남시 분당구 판교역로 180")
            address = address.replace("경기 성남시 분당구 판교역로146번길 20 현대백화점 판교점 오피스동", "경기도 성남시 분당구 판교역로 180")

            # 이마고웍스
            address = address.replace("서울 강남구 강남대로 636 두원빌딩", "서울 강남구 강남대로 636")
            address = address.replace("서울 강남구 강남대로 636 두원빌딩 1", "서울 강남구 강남대로 636")

            # 이스트소프트
            address = address.replace("서울 서초구 서초3동 반포대로 3", "서울 서초구 반포대로 3")

            # 이우소프트
            address = address.replace("서울 서초구 서초3동 반포대로 3", "서울 서초구 반포대로 3")

            # 업템포글로벌
            address = address.replace("서울 강남구 선릉로 561 3층", "서울 강남구 선릉로 561")

            # 이마고웍스
            address = address.replace("서울 강남구 강남대로 636 1", "서울 강남구 강남대로 636")

            # 이즈파크
            address = address.replace("경남 사천시 사남면 공단1로 78 한국항공우주산업", "경남 사천시 사남면 방지로 80")

            # 인디펜던트
            address = address.replace("서울 강남구 테헤란로 151 역삼하이츠빌딩 7층", "서울 강남구 테헤란로 151")
            address = address.replace("서울 강남구 테헤란로 151 7층", "서울 강남구 테헤란로 151")

            # 인터엑스
            address = address.replace("서울 금천구 가산디지털1로 171 가산SKV1 센터 1409호", "서울 금천구 가산디지털1로 171")
            address = address.replace("서울 금천구 가산디지털1로 171 1409호", "서울 금천구 가산디지털1로 171")

            # 잉카엔트웍스
            address = address.replace("서울 강남구 논현로 608 덕수빌딩 1층", "서울 강남구 논현로 608")

            # 제이카
            address = address.replace("서울 강서구 공항대로 227 마곡센트럴타워 1차 719호", "서울 강서구 공항대로 227")
            address = address.replace("서울 강서구 공항대로227", "서울 강서구 공항대로 227")

            # 지니언스
            address = address.replace("경기 안양시 동안구 벌말로 66 평촌역 하이필드 A동 12층", "경기 안양시 동안구 벌말로 66")
            address = address.replace("경기 안양시 동안구 벌말로 66 평촌역 하이필드 지식산업센터 A동 12층", "경기 안양시 동안구 벌말로 66")

            # 코인원
            address = address.replace("서울 영등포구 여의대로 108 파크원", "서울 영등포구 여의대로 108")
            address = address.replace("서울 영등포구 여의대로 108 Parc.1 45-46F", "서울 영등포구 여의대로 108")

            # 콰가
            address = address.replace("서울 강서구 마곡중앙로 165 프라이빗타워타워1차 805호", "서울 강서구 마곡중앙로 165")

            # 쿡앱스
            address = address.replace("경기 성남시 분당구 대왕판교로 660 유스페이스 1B동 8층", "경기 성남시 분당구 대왕판교로 660")
            address = address.replace("경기 성남시 분당구 대왕판교로660 유스페이스1B동 8층 쿡앱스", "경기 성남시 분당구 대왕판교로 660")

            # 쿤텍
            address = address.replace("경기 성남시 수정구 창업로54", "경기 성남시 수정구 창업로 54")
            address = address.replace("경기 성남시 수정구 달래내로 46", "경기 성남시 수정구 창업로 54")

            # 크로커스
            address = address.replace("서울 강남구 봉은사로 151 6층", "서울 강남구 봉은사로 151")

            # 클로버추얼패션
            address = address.replace("서울 강남구 테헤란로 152 42", "서울 강남구 테헤란로 152")
            address = address.replace("서울 강남구 도산대로8길 17-4", "서울 강남구 테헤란로 152")
            address = address.replace("제주특별자치도 제주시 첨단로 213-4 제주첨단과학기술단지", "제주특별자치도 제주시 첨단로 213")
            address = address.replace("제주특별자치도 제주시 첨단로 213-3", "제주특별자치도 제주시 첨단로 213")

            # 클로봇
            address = address.replace("경기 성남시 분당구 야탑동 341번지 지상 7층", "경기 성남시 분당구 성남대로925번길 16")

            # 태하
            address = address.replace("경기 남양주시 와부읍 수레로661번안길3", "경기 남양주시 와부읍 수레로661번안길 3")

            # 텔레픽스
            address = address.replace("서울 영등포구 국제금융로 8길 2", "서울 영등포구 국제금융로8길 2")
            address = address.replace("서울 영등포구 국제금융로8길 2 18층", "서울 영등포구 국제금융로8길 2")

            # 트레드링스
            address = address.replace("서울 서초구 서초대로 77길 17 13층", "서울 서초구 서초대로77길 17")
            address = address.replace("서울 서초구 서초대로77길 17 13층", "서울 서초구 서초대로77길 17")

            # 텐핑거스
            address = address.replace("서울 서초구 나루터로62", "서울 서초구 나루터로 62")

            # 파킹클라우드
            address = address.replace("서울 구로구 구로동 188-25 구로G밸리비즈프라자 14층", "서울 구로구 디지털로 300")
            address = address.replace("서울 구로구 구로동 188-25 구로지밸리비즈플라자 14층", "서울 구로구 디지털로 300")

            # 퍼블리
            address = address.replace("서울 강남구 테헤란로 503 10층", "서울 강남구 테헤란로 503")

            # 페이타랩
            address = address.replace("서울 강남구 영동대로 85길 34", "서울 강남구 영동대로85길 34")

            # 펜타시큐리티시스템
            address = address.replace("서울 영등포구 여의공원로 115 세우빌딩 8층 / 9층", "서울 영등포구 여의공원로 115")

            # 펨트론
            address = address.replace("서울 금천구 가산디지털1로 219 벽산디지털밸리 6차 1406호", "서울 금천구 가산디지털1로 219")

            # 펫박스
            address = address.replace("서울 마포구 양화로1길 81 H스퀘어 4층", "서울 마포구 양화로1길 81")

            # 주소 열을 업데이트합니다.
            df.at[i, 'cleaned_address'] = address
            df.at[i, 'company'] = company

        return df

    def change_addresses_to_cooridinates(df):
        # api_key = '7a51769a2fc182e461c558f80b800389'
        api_key = 'dcc9b973a293afda870240cbc42603c8'

        def addr_to_lat_lon(addr):
            url = 'https://dapi.kakao.com/v2/local/search/address.json?query={address}'.format(address=addr)
            headers = {"Authorization": "KakaoAK " + api_key}
            result = json.loads(str(requests.get(url, headers=headers).text))
            match_first = result['documents'][0]['address']
            return float(match_first['x']), float(match_first['y'])

        # 데이터프레임에 위경도 컬럼 추가
        df['latitude'] = np.nan
        df['longitude'] = np.nan

        total = len(df)

        # 정제된 주소를 위경도로 변환해서 위도, 경도 컬럼에 각각 저장
        for index, row in df.iterrows():
            try:
                address = row['cleaned_address']
                longitude, latitude = addr_to_lat_lon(address)
                print(f'진행도 : ({index}/{total})')
                df.at[index, 'latitude'] = latitude
                df.at[index, 'longitude'] = longitude
            except:
                pass

        return df

    def add_inner_company(df):
        # 정규표현식 패턴
        pattern = re.compile(r"(\w+구|\w+시)")

        # 'inner_company' 컬럼이 없으면 추가
        if 'inner_company' not in df.columns:
            df['inner_company'] = np.nan

        # 허용하는 위경도 오차
        tolerance = 0.001

        # 데이터프레임의 각 행을 반복하며 회사 이름을 업데이트
        for i, row in df.iterrows():
            company = row['company']
            address = row['cleaned_address']
            longitude = row['longitude']
            latitude = row['latitude']

            # 같은 회사 이름을 가진 행 찾기
            same_company_rows = df[df['company'] == company]

            # 같은 회사 이름을 가진 행 중에서 위도와 경도가 다른 행이 있는지 확인
            different_coordinates = False
            for _, same_company_row in same_company_rows.iterrows():
                # 위도와 경도가 None이 아니고 차이가 tolerance 이내인지 확인
                if same_company_row['longitude'] is not None and same_company_row['latitude'] is not None:
                    if abs(same_company_row['longitude'] - longitude) > tolerance or abs(
                            same_company_row['latitude'] - latitude) > tolerance:
                        different_coordinates = True
                        break

            # 위경도가 다른 경우에만 inner_company를 업데이트
            if different_coordinates:
                # 정규표현식으로 시 또는 구 이름을 찾습니다.
                address = str(address)
                match = pattern.search(address)
                if match:
                    region = match.group(1)
                    # 구 이름이면 "구"를 제거
                    if '구' in region:
                        if region not in ['중구', '대구']:
                            region = region[:-1]
                    # 시 이름이면 "시"를 제거
                    elif '시' in region:
                        region = region[:-1]
                    new_name = f"{company} {region}"
                    # inner_company 컬럼을 추가해서 자회사 종류 업데이트
                    df.at[i, 'inner_company'] = new_name
            else:
                # 위경도가 같은 경우 company 값을 그대로 사용
                df.at[i, 'inner_company'] = company

        return df

    def preprocessing_position(df):
        # remove bad stings in position column
        df.loc[df['position'].str.contains('개발자'), 'position'] = df['position'].str.replace('개발자', '')

        # 띄어쓰기 처리(' 데이터 엔지니어링', '데이터 엔지니어링')
        df['position'] = df['position'].str.replace(' ', '')

        # position 컬럼 용어 전처리
        df.loc[df['position'] == 'QA엔지니어', 'position'] = 'QA'
        df.loc[df['position'] == '정보보안담당자', 'position'] = '인터넷보안'
        df.loc[df['position'] == '데브옵스', 'position'] = 'devops/시스템엔지니어'
        df.loc[df['position'] == '인공지능(AI)', 'position'] = '인공지능/머신러닝'
        df.loc[df['position'] == '머신러닝', 'position'] = '인공지능/머신러닝'
        df.loc[df['position'] == '빅데이터엔지니어', 'position'] = '데이터엔지니어'
        df.loc[df['position'] == '데이터엔지니어링', 'position'] = '데이터엔지니어'
        df.loc[df['position'] == '웹퍼블리싱', 'position'] = '웹퍼블리셔'


        # position 전처리 2, 묶일 수 있는 건 묶기

        # 임베디드
        df.loc[df['position'] == '임베디드소프트웨어', 'position'] = '임베디드'
        df.loc[df['position'] == 'HW/임베디드', 'position'] = '임베디드'

        # 웹퍼블리셔 -> 프론트엔드
        df.loc[df['position'] == '웹퍼블리셔', 'position'] = '프론트엔드'

        # 안드로이드/IOS, 크로스플랫폼 -> 모바일
        df.loc[df['position'] == '안드로이드', 'position'] = '모바일'
        df.loc[df['position'] == 'iOS', 'position'] = '모바일'
        df.loc[df['position'] == 'IOS', 'position'] = '모바일'
        df.loc[df['position'] == '크로스플랫폼', 'position'] = '모바일'
        df.loc[df['position'] == '크로스플랫폼앱', 'position'] = '모바일'

        # 게임/VR/AR/3D
        df.loc[df['position'] == 'VR/AR/3D', 'position'] = '게임/VR/AR/3D'
        df.loc[df['position'] == '모바일게임', 'position'] = '게임/VR/AR/3D'
        df.loc[df['position'] == '게임서버', 'position'] = '게임/VR/AR/3D'
        df.loc[df['position'] == '게임클라이언트', 'position'] = '게임/VR/AR/3D'
        df.loc[df['position'] == '로보틱스미들웨어', 'position'] = '게임/VR/AR/3D'
        df.loc[df['position'] == '그래픽스', 'position'] = '게임/VR/AR/3D'

        # 서버/백엔드
        df.loc[df['position'] == 'ERP', 'position'] = '서버/백엔드'

        # DevOps/시스템엔지니어
        df.loc[df['position'] == 'devops/시스템엔지니어', 'position'] = 'DevOps/시스템엔지니어'
        df.loc[df['position'] == '시스템소프트웨어', 'position'] = 'DevOps/시스템엔지니어'
        df.loc[df['position'] == '시스템/네트워크', 'position'] = 'DevOps/시스템엔지니어'
        df.loc[df['position'] == '데브옵스', 'position'] = 'DevOps/시스템엔지니어'

        # 응용프로그램, 사물인터넷(IoT) -> SW/솔루션
        df.loc[df['position'] == '응용프로그램', 'position'] = 'SW/솔루션'
        df.loc[df['position'] == '사물인터넷(IoT)', 'position'] = 'SW/솔루션'

        return df

    def init_id(df):
        # 인덱스 초기화 및 'id' 컬럼 재정의
        df.reset_index(drop=True, inplace=True)
        df['id'] = df.index + 1

        return df

    def reverse_corridates(df):
        # api_key = '7a51769a2fc182e461c558f80b800389'
        api_key = 'dcc9b973a293afda870240cbc42603c8'

        # 위경도를 주소로 변환하는 함수입니다.
        def lat_lon_to_addr(lat, lon):
            url = f"https://dapi.kakao.com/v2/local/geo/coord2address.json?x={lon}&y={lat}"
            headers = {"Authorization": "KakaoAK " + api_key}
            result = json.loads(str(requests.get(url, headers=headers).text))
            match_first = result['documents'][0]['address']
            return match_first['address_name']

        # 위도, 경도를 주소로 변환하여 저장
        df['changed_address'] = None

        total = len(df)

        for index, row in df.iterrows():
            try:
                lat = row['latitude']
                lon = row['longitude']
                address = lat_lon_to_addr(lat, lon)
                print(f'진행도 : ({index}/{total})')
                df.at[index, 'changed_address'] = address
            except:
                pass

        return df

    def final_left_address(df):
        # 'address' 및 'cleaned_address' 컬럼 드롭
        df = df.drop(['address', 'cleaned_address'], axis=1)

        # 'changed_address' 컬럼을 'address'로 변경
        df.rename(columns={'changed_address': 'address'}, inplace=True)

        return df

    def split_by_comma(df):
        # position ,을 기준으로 분할
        df = df.assign(position=df['position'].str.split(',')).explode('position')
        df.reset_index(inplace=True, drop=True)

        return df

    try:
        # 주소 전처리
        df = change_address_cityname(df)
        df = change_address_main(df)
        df = change_address_detail(df)
        print("주소 전처리를 완료했습니다.")

        # 위경도 및 회사이름 전처리
        df = change_addresses_to_cooridinates(df)
        print("위경도 변환을 완료했습니다.")
        df = add_inner_company(df)
        print("회사 이름 전처리를 완료했습니다.")

        # 포지션 및 라벨 전처리
        print("데이터프레임을 각 포지션별로 분할합니다.")
        df = split_by_comma(df)
        df = preprocessing_position(df)
        print("포지션 전처리를 완료했습니다.")

        # id 초기화
        df = init_id(df)
        print("id컬럼 값을 초기화후 재정의합니다.")

        # 위경도를 주소로 변경(주소 재정의)
        print("위경도 주소 변환을 시작합니다.")
        df = reverse_corridates(df)

        # 필요없는 주소컬럼 삭제 및 업데이트
        df = final_left_address(df)
        print("변환된 주소만 남기고 나머지 주소는 삭제합니다.")


    except Exception as e:
        print(e)

    hook = get_S3_connection()
    hook.load_string(
        string_data=df.to_csv(index=False),
        key='data/company_combined.csv',
        bucket_name='oh-my-stack',
        replace=True
    )

    update_production_table(df=df, table_name='company_combined')



preprocess_address = PythonOperator(
    task_id = 'preprocess_address',
    python_callable = preprocess_address,
    params = {},
    dag = dag
)







def company_normalization(**context):
    def make_table_about_company(df):

        # main_company
        main_company_df = pd.DataFrame(columns=['id', 'company_name'])
        main_company_df['company_name'] = df['company'].unique()
        main_company_df['id'] = main_company_df.reset_index().index + 1

        main_company_df_columns = ",".join(main_company_df.columns)
        placeholders = ",".join(['%s'] * len(main_company_df.columns))

        sql = """SET FOREIGN_KEY_CHECKS = 0;"""
        cur.execute(sql)

        sql = """USE production;"""
        cur.execute(sql)

        try:
            sql = """TRUNCATE TABLE main_company;"""
            cur.execute(sql)

            sql = f"""INSERT INTO main_company ({main_company_df_columns}) VALUES ({placeholders});"""

            params = [tuple(record) for record in main_company_df.to_numpy()]
            cur.executemany(sql, params)
        except:
            sql = """ROLLBACK;"""
            cur.execute(sql)




        # company
        company_df = df[['company', 'inner_company', 'address', 'latitude', 'longitude']].copy()
        company_df.drop_duplicates(inplace=True, ignore_index=True)
        company_df.rename(columns={'company': 'main_company_id'}, inplace=True)
        company_df['id'] = company_df.reset_index().index + 1

        for i, value in enumerate(main_company_df['company_name']):
            company_df['main_company_id'].replace(value, i + 1, inplace=True)

        company_address_df_columns = ",".join(company_df.columns)
        placeholders = ",".join(['%s'] * len(company_df.columns))

        try:
            sql = """TRUNCATE TABLE company;"""
            cur.execute(sql)

            sql = f"""INSERT INTO company ({company_address_df_columns}) VALUES ({placeholders});"""

            params = [tuple(record) for record in company_df.to_numpy()]
            cur.executemany(sql, params)
        except:
            sql = """ROLLBACK;"""
            cur.execute(sql)




        # company_separated
        company_separated_df = df

        for i, value in enumerate(main_company_df['company_name']):
            company_separated_df.rename(columns={'company': 'company_id'}, inplace=True)
            company_separated_df['company_id'].replace(value, i + 1, inplace=True)

        company_separated_df_columns = ",".join(company_separated_df.columns)
        placeholders = ",".join(['%s'] * len(company_separated_df.columns))

        company_separated_df.fillna(value=np.nan, inplace=True)
        company_separated_df = company_separated_df.replace(np.nan, None)
        company_separated_df = company_separated_df.replace('nan', None)


        try:
            sql = """TRUNCATE TABLE company_separated;"""
            cur.execute(sql)

            sql = f"""INSERT INTO company_separated ({company_separated_df_columns}) VALUES ({placeholders});"""

            params = [tuple(record) for record in company_separated_df.to_numpy()]
            cur.executemany(sql, params)
        except:
            sql = """ROLLBACK;"""
            cur.execute(sql)

        sql = """SET FOREIGN_KEY_CHECKS = 1;"""
        cur.execute(sql)

        con.commit()

    rds_hook, con, cur = get_RDS_connection()

    df = get_df_from_production(table_name='company_combined')

    df.fillna(value=np.nan, inplace=True)
    df = df.replace(np.nan, None)
    df = df.replace('nan', None)

    make_table_about_company(df)

company_normalization = PythonOperator(
    task_id = 'company_normalization',
    python_callable = company_normalization,
    params = {},
    dag = dag
)







def position_and_recruit(**context):

    def make_table_about_recruit(df):

        rds_hook, con, cur = get_RDS_connection()

        sql = """USE production;"""
        cur.execute(sql)



        # make position df and preprocessing on position column
        position_df = pd.DataFrame(columns=['id', 'position'])
        position_df['position'] = df['position'].unique()

        for i in range(len(df)):
            position_df['id'][i] = i + 1

        for i, value in enumerate(position_df['position']):
            df['position'].replace(value, i + 1, inplace=True)

        df.rename(columns={'position': 'position_id'}, inplace=True)




        # job ad table update
        sql = """SET FOREIGN_KEY_CHECKS = 0;"""
        cur.execute(sql)
        try:
            sql = """TRUNCATE TABLE recruit;"""
            cur.execute(sql)

            sql = """INSERT INTO recruit (id, company_id, position_id, title, recruit_stacks, main_business, qualification, career_id, preferences, site, date) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s);"""

            params = []

            for i in range(len(df)):
                record = df.iloc[i]
                params.append((record['id'], record['company_id'], record['position_id'], record['title'], record['stack'],
                            record['main_business'], record['qualification'], record['career_id'], record['preferences'],
                            record['site'], record['date']))
            cur.executemany(sql, params)
        except:
            sql = """ROLLBACK;"""
            cur.execute(sql)



        

        try:
            # position table update
            sql = """TRUNCATE TABLE position;"""
            cur.execute(sql)

            sql = """INSERT INTO position (id, position) VALUES (%s, %s);"""

            params = []

            for i in range(len(position_df)):
                record = position_df.iloc[i]
                params.append((record['id'], record['position']))
            cur.executemany(sql, params)
        except:
            sql = """ROLLBACK;"""
            cur.execute(sql)

        sql = """SET FOREIGN_KEY_CHECKS = 1;"""
        cur.execute(sql)

        con.commit()


    df = get_df_from_production(table_name='company_separated')

    make_table_about_recruit(df)

position_and_recruit = PythonOperator(
    task_id = 'position_and_recruit',
    python_callable = position_and_recruit,
    params = {},
    dag = dag
)






def stack_normalization(**context):

    def cleanup_text(x):
        """텍스트 내부의 특정 문자열 정리 및 필요한 부분만 남기기"""
        if any(word in x for word in ['aws', 'gcp', 'ncp']):
            x = re.sub(r'\(.*\)', '', x).strip()
        x = x.replace('amazon', 'aws').replace('gcp', 'googlecloudplatform').replace('ncp', 'navercloudplatform')
        x = re.sub(r'\(.*\)', '', x).strip()
        return x

    recruit_df = get_df_from_production(table_name='recruit')
    total_stack_df= get_df_from_production(table_name='total_stack')

    recruit_df['recruit_stacks'] = recruit_df['recruit_stacks'].str.lower().str.split(',')
    recruit_df = recruit_df.explode('recruit_stacks')
    recruit_df['recruit_stacks'] = recruit_df['recruit_stacks'].str.replace(" ", "")
    stack_arr_df = recruit_df.copy()


    for idx in recruit_df['id']:
        stack_arr = []
        for stack in recruit_df.loc[recruit_df['id'] == idx]['recruit_stacks']:
            target_stack = stack
            try:
                target_url = total_stack_df[total_stack_df['title'] == target_stack]['img_url'].values[0]
                target_idx = str(total_stack_df[total_stack_df['title'] == target_stack]['img_url'].index.values[0] + 1)
            except IndexError:
                target_url = "https://oh-my-stack.s3.ap-northeast-2.amazonaws.com/stackimages/nostack.png"
                target_idx = "406"
                new_row = ({'id': f'{len(total_stack_df)+1}', 'title': f'{target_stack}', 'img_url': f'{target_url}'})
                total_stack_df = pd.concat([total_stack_df, pd.DataFrame(new_row, index=[0])], ignore_index=True)
            stack_arr.append(target_idx)
        stack_arr_df.loc[idx - 1, 'recruit_stacks'] = ",".join(stack_arr)

    total_stack_df['title'] = total_stack_df['title'].apply(cleanup_text)
    total_stack_df.drop_duplicates(subset=['title'], keep='first', inplace=True, ignore_index=True)
    stack_arr_df.drop_duplicates(keep='first', inplace=True, ignore_index=True)
    total_stack_df['id'] = total_stack_df.reset_index().index + 1
    stack_arr_df['id'] = stack_arr_df.reset_index().index + 1

    rds_hook, con, cur = get_RDS_connection()

    # update recruit stack column
    sql = f"""START TRANSACTION;"""
    cur.execute(sql)

    try:
        sql = f"""USE production;"""
        cur.execute(sql)
        sql = f"""TRUNCATE TABLE recruit;"""
        cur.execute(sql)

        table_columns = ",".join(stack_arr_df.columns)
        placeholders = ",".join(['%s'] * len(stack_arr_df.columns))

        sql = f"""INSERT INTO recruit ({table_columns}) VALUES ({placeholders})"""
        params = [tuple(record) for record in stack_arr_df.to_numpy()]
        cur.executemany(sql, params)
        sql = f"""COMMIT;"""
        cur.execute(sql)
    except Exception as e:
        print(f"\n\n Failed to update recruit stack column because of {e}\n\n")
        sql = f"""ROLLBACK;"""
        cur.execute(sql)

    

    # update total_stack table
    sql = f"""START TRANSACTION;"""
    cur.execute(sql)
    

    try:
        sql = f"""USE production;"""
        cur.execute(sql)
        sql = f"""TRUNCATE TABLE total_stack;"""
        cur.execute(sql)

        table_columns = ",".join(total_stack_df.columns)
        placeholders = ",".join(['%s'] * len(total_stack_df.columns))

        sql = f"""INSERT INTO total_stack ({table_columns}) VALUES ({placeholders})"""
        params = [tuple(record) for record in total_stack_df.to_numpy()]
        cur.executemany(sql, params)
        sql = f"""COMMIT;"""
        cur.execute(sql)
    except Exception as e:
        print(f"\n\n Failed to update total_stack table because of {e}\n\n")
        sql = f"""ROLLBACK;"""
        cur.execute(sql)

    

stack_normalization = PythonOperator(
    task_id = 'stack_normalization',
    python_callable = stack_normalization,
    params = {},
    dag = dag
)




def split_rows(**context):
    rds_hook, con, cur = get_RDS_connection()
    sql = """USE production;"""
    cur.execute(sql)
    sql = """
    SELECT company, position, title, stack, main_business,cb.qualification, cb.preferences, c.career, site, date, latitude, longitude, inner_company, address
    FROM company_combined cb
    JOIN career c ON cb.career_id = c.id;
    """
    cur.execute(sql)
    df = cur.fetchall()
    df = pd.DataFrame(df, columns=[desc[0] for desc in cur.description])
    df['stack'] = df['stack'].str.lower()
    df['title'] = df['title'].str.lower()
    df['position'] = df['position'].str.lower()
    df['position'] = df['position'].str.split(',')
    df['stack'] = df['stack'].str.split(',')
    df2 = df.explode('position')
    df = df2.explode('stack')
    # df['title'] = df['title'].str.replace("'", "")

    hook = get_S3_connection()
    hook.load_string(
        string_data = df.to_csv(index=False),
        key = 'data/daily_ai.csv',
        bucket_name = 'oh-my-stack',
        replace = True
    )

split_rows = PythonOperator(
    task_id = 'split_rows',
    python_callable = split_rows,
    params = {},
    dag = dag
)








def incremental_update(**context):
    hook = get_S3_connection()

    hook.download_file('data/daily_ai.csv', bucket_name='oh-my-stack', local_path='/var/lib/airflow/temp', preserve_file_name=True, use_autogenerated_subdir=False)
    hook.download_file('data/incremental_ai.csv', bucket_name='oh-my-stack', local_path='/var/lib/airflow/temp', preserve_file_name=True, use_autogenerated_subdir=False)

    df = pd.read_csv('/var/lib/airflow/temp/daily_ai.csv', encoding='utf8')
    df2 = pd.read_csv('/var/lib/airflow/temp/incremental_ai.csv', encoding='utf8')

    df = pd.concat([df, df2])
    df.drop_duplicates(keep='first', inplace=True, ignore_index=True)

    hook.load_string(
        string_data=df.to_csv(encoding='utf8', index=False),
        key='data/incremental_ai.csv',
        bucket_name='oh-my-stack',
        replace=True
    )

    upload_df_to_rds(df=df, table_name='incremental_ai', schema='raw_data')


incremental_update = PythonOperator(
    task_id = 'incremental_update',
    python_callable = incremental_update,
    params = {},
    dag = dag
)








remove_temp_obj = BashOperator(
    task_id = 'remove_temp_obj',
    bash_command = 'rm /var/lib/airflow/temp/*',
    dag = dag
)




get_recent_en >> career_erd_separator >> preprocess_address >> company_normalization >> position_and_recruit >> stack_normalization >> split_rows >> incremental_update >> remove_temp_obj